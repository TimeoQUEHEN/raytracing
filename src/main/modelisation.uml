@startuml
package sae.raytracing.model {
class Triplet {
- double x,y,z
+ Triplet(double x, double y, double z)
+ double getX()
+ double getY()
+ double getZ()
# Triplet addition(Triplet triplet)
# Triplet substraction(Triplet triplet)
# Triplet multiplyUsingAScalar(double d)
# Triplet scalarProduct(Triplet triplet)
# Triplet vectorProduct(Triplet triplet)
# Triplet schursProduct(Triplet triplet)
# double length()
# Triplet norm()
}
class Color {
- Triplet rgb
+ Color(double r, double g, double b)
+ double getRValue()
+ double getGValue()
+ double getBValue()
# Triplet addition(Triplet triplet)
# Triplet multiplyUsingAScalar(double d)
# Triplet shurssProduct(Triplet triplet)
}
class Point {
- Triplet coords
+ Point(double x, double y, double z)
+ double getX()
+ double getY()
+ double getZ()
# Triplet substraction(Triplet triplet)
# Triplet multiplyUsingAScalar(double d)
}
class Vector {
- Triplet destDirNorm
+ Sphere(double destination, double direction, double norm)
+ double getDestination()
+ double getDirection()
+ double getNorm()
+ double getR()
# Triplet addition(Triplet triplet)
# Triplet substraction(Triplet triplet)
# Triplet multiplyUsingAScalar(double d)
# Triplet scalarProduct(Triplet triplet)
# Triplet vectorProduct(Triplet triplet)
# double length()
# Triplet norm()
}

Color o-- Triplet
Point o-- Triplet
Vector o-- Triplet
}
@enduml

@startuml
package sae.raytracing.model {
interface ILight {
Color getColor()
}
class LightDirectional {
- Color color
- Vector vector
+ LightDirectional(Vector vector, Color color)
+ LightDirectional(double x, double y, double z, double r, double g, double b)
+ Color getColor()
+ Vector getVector()
}
class LightPunctual {
- Color color
- Point point
+ LightPunctual(Point point, Color color)
+ LightPunctual(double x, double y, double z, double r, double g, double b)
}

interface IElement {}
class Plane {
- Point point
- Vector vector
+ Plane(Point point, Vector vector)
+ Plane(double x1, double y1, double z1, double x2, double y2, double z2)
+ Point getPoint()
+ Vector getVector()
}
class Triangle {
- Point pX, pY, pZ
+ Triangle(Point x, Point y, PointZ)
+ Point getX()
+ Point getY()
+ Point getZ()
}
class Sphere {
- Point center
- double r
+ Sphere(double x, double y, double z, double z)
+ double getX()
+ double getY()
+ double getZ()
+ double getR()
}

class Camera {
- Point lookFrom, lookAt
- Vector up
- double fov
+ Camera(Point lookFrom, Point lookAt, Vector up, double fov)
+ Camera(double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, double fov)
+ Point getLookFrom()
+ Point getLookAt()
+ Point getUp()
+ Point getFov()
}

class Scene {
- int height, width
- Camera camera
- ILight[] lights
- IElement[] elements
+ Scene(int height, int width, Camera camera, ILight[] lights, IElements[] elements)
+ int getHeight()
+ int getWidth()
+ Camera getCamera()
+ ILight[] getLight()
+ IElements[] getElements()
}
}
@enduml

@startuml

Camera --o Scene
Point ---o Camera

IElement --* Plane
IElement --* Triangle
IElement --* Sphere

ILight --* LightDirectional
ILight --* LightPunctual

ILight ---o Scene
IElement ---o Scene

@enduml

@startuml
package sae.raytracing.model {
interface IBuilder {
void setDimensions(int height, int width)
void setCamera(Camera camera)
void addLights(ILight lights)
void addElements(IElements elements)
Scene scene()
}

class SceneBuilder{
- int height, width
- Camera camera
- ArrayList<ILight> lights
- ArrayList<IElement> elements
+ void setDimensions(int height, int width)
+ void setCamera(Camera camera)
+ void addLights(ILight lights)
+ void addElements(IElements elements)
+ Scene scene()
}
}
@enduml

@startuml

package sae.raytracing.model {
class Parser {
void reader()
}
}
@enduml